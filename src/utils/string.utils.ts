import * as CryptoJS from 'crypto-js';
import * as testData  from '../../tests/testData/testData.json';

export default class StringUtils {
    constructor() {}

    /**
     * Method to descrypt the application password generated by the user
     * The password is taken from the 'testConfig.ts'
     * @returns decrypted password stored in 'testConfig.ts'
     */
    public async decipherAppPassword(encryptPwd: string): Promise<string> {
        const key = `SECRET`;
        return CryptoJS.AES.decrypt(encryptPwd, key).toString(CryptoJS.enc.Utf8);
    }

    /**
     * Method to descrypt the database password generated by the user
     * The password is taken from the 'testConfig.ts'
     * @returns decrypted password stored in 'testConfig.ts'
     */
    public async decipherDbPassword(): Promise<string> {
        const key = `SECRET`;
        return CryptoJS.AES.decrypt(testData.APP_PASSWORD, key).toString(CryptoJS.enc.Utf8);
    }

    /**
     * Method to encrypt a user password and print it out in console 
     * The encrypted password can be used in other flows 
     * @param password - user non-encrypted password
     * @returns user introduced password encrypted using Crypto
     */
    public async encryptPassword(password: string): Promise<string> {
        const key = `SECRET`;
        const cipher = CryptoJS.AES.encrypt(password, key);
        console.log(cipher.toString());
        return cipher.toString();
    }
}